{"version":3,"sources":["Components/Error.js","Components/Details.js","Components/WorldMap.js","App.js","serviceWorker.js","index.js"],"names":["Error","react_default","a","createElement","Details","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","className","undefined","location","state","key","React","Component","wrapperStyles","width","maxWidth","margin","WorldMap","event","showDetail","properties","ZIPCODE","j","_this","fetch","then","res","json","data","history","push","pathname","_this2","style","lib","projectionConfig","scale","rotation","height","center","geography","geographies","projection","map","i","onClick","handleClick","bind","default","fill","ZIP","stroke","strokeWidth","outline","hover","pressed","App","react_router_dom","react_router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c74a59d3.chunk.js","sourcesContent":["//Loaded when one tries to manually go to invalid url\r\nimport React from \"react\";\r\n\r\nconst Error = () =>{\r\n    return (\r\n        <div>\r\n        <p> The page you are requesting does not exist! </p>\r\n        </div>\r\n        )\r\n    }\r\n\r\nexport default Error;","//the div with className perVAl has a check for non-existing data\r\nimport React from \"react\";\r\nimport \"./detail.css\";\r\n\r\nclass Details extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"detailDiv\" >\r\n\t\t\t<div className=\"firstSentence\"><p>Percentage of 18 and older population with Asthma conditions residing in this area is:</p> </div>\r\n\t\t\t<div className=\"perVal\"> {this.props.location.state != undefined && this.props.location.state.key != undefined  ? this.props.location.state.key: \"Sorry we do not have the data\"}% </div>\r\n\t\t\t</div>\r\n\t\t)}\r\n\t\t\r\n\r\n        \r\n        \r\n}\r\n\r\nexport default Details;\r\n\t\t\r\n        \r\n","\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  ComposableMap,\r\n  ZoomableGroup,\r\n  Geographies,\r\n  Geography,\r\n  } from \"react-simple-maps\";\r\nimport Details from './Details.js';\r\n\r\nconst wrapperStyles = {\r\n    width: \"100%\",\r\n    maxWidth: 980,\r\n    margin: \"0 auto\",\r\n}\r\n\r\nclass WorldMap extends Component {\r\n    handleClick(event){        \r\n       // console.log(event.properties.ZIPCODE); //incase one wants to know the zip code\r\n        this.showDetail(event.properties.ZIPCODE);\r\n\r\n    }\r\n\r\n    showDetail(j){\r\n        // console.log(j); \r\n        fetch('/asthamaData.json')\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n\r\n        // console.log('data:', data[j]);  //incase one wants to know the %value in log\r\n        this.props.history.push({\r\n          pathname:\"/details\",\r\n          state:{\r\n              key:data[j]\r\n              }\r\n\r\n         })\r\n        })    \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div><h1>Welcome to Los Angeles. Click on the region to know about percentage of 18+ population having Asthama Condition.</h1></div>\r\n                <div style={wrapperStyles}>\r\n                    <ComposableMap\r\n                        projectionConfig={{\r\n                        scale: 205,\r\n                        rotation: [-11,0,0],\r\n                        }}\r\n                        width={980}\r\n                        height={551}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"auto\",\r\n                        }}\r\n                    >\r\n          \r\n                        <ZoomableGroup center={[0,20]}>\r\n                           <Geographies geography={ \"/la.json\" }>\r\n                                {(geographies, projection) => geographies.map((geography, i) => (\r\n                                     <Geography\r\n                                        key={ i }\r\n                                        geography={ geography }\r\n                                        projection={ projection }\r\n                                        onClick={ this.handleClick.bind(this) } //geography.properties.ZIPCODE\r\n                                        style={{\r\n                                             default: {\r\n                                                //to have different colors in different regions, I am using the zipcodes.\r\n                                                 fill: \"#\"+((geography.properties.ZIP -60000)*10),\r\n                                                stroke: \"#607D8B\", //border color\r\n                                                strokeWidth: 0.25,\r\n                                                outline: \"none\",\r\n                                                },\r\n                                            hover: {\r\n                                                fill: \"#3341FF\", //color on hover\r\n                                                    stroke: \"#607D8B\",\r\n                                                    strokeWidth: 0.75,\r\n                                                    outline: \"none\",\r\n                                                    },\r\n                                            pressed: {\r\n                                                    fill: \"#263238\", //color when clicked\r\n                                                    stroke: \"#607D8B\",\r\n                                                    strokeWidth: 0.75,\r\n                                                    outline: \"none\",\r\n                                                    }\r\n                                        }}\r\n                                    />\r\n                            ))}\r\n                        </Geographies>\r\n                    </ZoomableGroup>\r\n                </ComposableMap>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WorldMap","\r\nimport React, { Component } from \"react\";\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport Error from './Components/Error.js';\r\nimport Details from './Components/Details.js';\r\nimport WorldMap from './Components/WorldMap.js'\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n    <BrowserRouter>\r\n                <Switch>\r\n                    <Route path='/' component={WorldMap} exact />\r\n                    <Route path='/details' component={Details} />\r\n                    \r\n                    <Route component={Error} /> \r\n                </Switch>\r\n\r\n            </BrowserRouter>\r\n            )}\r\n                    }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport WorldMap from './Components/WorldMap'\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}